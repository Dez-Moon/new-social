{"ast":null,"code":"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { sendMessage, updateNewMessageText } from '../../redux/dialogs-reducer';\nimport Dialogs from \"./Dialogs\";\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigate\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = state => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    sendMessage: newMessageBody => {\n      dispatch(sendMessage(newMessageBody));\n    }\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthNavigate)(Dialogs);","map":{"version":3,"sources":["/Users/konstantin/Documents/Study/ReactJS/01/my-app/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","connect","sendMessage","updateNewMessageText","Dialogs","withAuthNavigate","compose","mapStateToProps","state","dialogs","dialogsPage","messages","mapDispatchToProps","dispatch","newMessageBody"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,6BAAlD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAASC,OAAT,QAAwB,OAAxB;;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHC,IAAAA,OAAO,EAAED,KAAK,CAACE,WAAN,CAAkBD,OADxB;AAEHE,IAAAA,QAAQ,EAAEH,KAAK,CAACE,WAAN,CAAkBC;AAFzB,GAAP;AAIH,CALD;;AAMA,IAAIC,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACHX,IAAAA,WAAW,EAAGY,cAAD,IAAoB;AAC7BD,MAAAA,QAAQ,CAACX,WAAW,CAACY,cAAD,CAAZ,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AAQA,eAAeR,OAAO,CAClBL,OAAO,CAACM,eAAD,EAAkBK,kBAAlB,CADW,EAElBP,gBAFkB,CAAP,CAGbD,OAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { sendMessage, updateNewMessageText } from '../../redux/dialogs-reducer'\nimport Dialogs from \"./Dialogs\";\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\"\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessage(newMessageBody))\n        }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthNavigate\n)(Dialogs)"]},"metadata":{},"sourceType":"module"}