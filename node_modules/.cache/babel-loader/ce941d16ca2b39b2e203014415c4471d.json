{"ast":null,"code":"import { authAPI } from \"../../src/api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET-USER-DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => {\n  return dispatch => {\n    debugger;\n    return authAPI.me().then(data => {\n      if (data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(data => {\n      if (data.resultCode === 0) {\n        dispatch(getAuthUserData());\n      } else {\n        let message = data.messages.length > 0 ? data.messages[0] : 'Some error';\n        dispatch(stopSubmit('Login', {\n          _error: message\n        }));\n      }\n    });\n  };\n};\nexport const logout = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.logout(email, password, rememberMe).then(data => {\n      if (data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/konstantin/Documents/Study/ReactJS/01/my-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAWA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAAuBU,EAAAA,OAAO,EAAE;AAAER,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB;AAAhC,CAAnC,CAAxB;AACP,OAAO,MAAMO,eAAe,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACjB;AACA,WAAOf,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAkBC,IAAI,IAAI;AAC7B,UAAIA,IAAI,CAACC,UAAL,KAAoB,CAAxB,EAA2B;AACvB,YAAI;AAAEC,UAAAA,EAAF;AAAMf,UAAAA,KAAN;AAAaC,UAAAA;AAAb,YAAuBY,IAAI,CAACA,IAAhC;AACAH,QAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KALM,CAAP;AAMH,GARD;AASH,CAVM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC;AAClD,SAAQP,QAAD,IAAc;AACjBf,IAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAgDC,IAAI,IAAI;AACpD,UAAIA,IAAI,CAACC,UAAL,KAAoB,CAAxB,EAA2B;AACvBJ,QAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,OAFD,MAEO;AACH,YAAIS,OAAO,GAAGL,IAAI,CAACM,QAAL,CAAcC,MAAd,GAAuB,CAAvB,GAA2BP,IAAI,CAACM,QAAL,CAAc,CAAd,CAA3B,GAA8C,YAA5D;AACAT,QAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAEyB,UAAAA,MAAM,EAAEH;AAAV,SAAV,CAAX,CAAR;AACH;AACJ,KAPD;AAQH,GATD;AAUH,CAXM;AAYP,OAAO,MAAMI,MAAM,GAAG,CAACtB,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC;AACnD,SAAQP,QAAD,IAAc;AACjBf,IAAAA,OAAO,CAAC2B,MAAR,CAAetB,KAAf,EAAsBgB,QAAtB,EAAgCC,UAAhC,EAA4CL,IAA5C,CAAiDC,IAAI,IAAI;AACrD,UAAIA,IAAI,CAACC,UAAL,KAAoB,CAAxB,EAA2B;AACvBJ,QAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../../src/api/api\";\nimport { stopSubmit } from \"redux-form\"\n\nconst SET_USER_DATA = 'SET-USER-DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state;\n    }\n}\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } });\nexport const getAuthUserData = () => {\n    return (dispatch) => {\n        debugger\n        return authAPI.me().then(data => {\n            if (data.resultCode === 0) {\n                let { id, email, login } = data.data;\n                dispatch(setAuthUserData(id, email, login, true));\n            }\n        })\n    }\n}\n\nexport const login = (email, password, rememberMe) => {\n    return (dispatch) => {\n        authAPI.login(email, password, rememberMe).then(data => {\n            if (data.resultCode === 0) {\n                dispatch(getAuthUserData());\n            } else {\n                let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\n                dispatch(stopSubmit('Login', { _error: message }))\n            }\n        })\n    }\n}\nexport const logout = (email, password, rememberMe) => {\n    return (dispatch) => {\n        authAPI.logout(email, password, rememberMe).then(data => {\n            if (data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n        })\n    }\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}